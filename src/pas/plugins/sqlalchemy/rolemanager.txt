==============================================================================
Functional tests using @@usergroup-userprefs view to manage user roles.
==============================================================================

Create browser, setup portal and login as Manager.

    >>> from Products.Five.testbrowser import Browser
    >>> from Products.PloneTestCase.setup import portal_owner, default_password
    >>> browser = Browser()
    >>> browser.handleErrors = False
    >>> self.portal.error_log._ignored_exceptions = {}
    >>> portal_url = self.portal.absolute_url()
    >>> browser.open(portal_url + '/login')
    >>> browser.getControl(name='__ac_name').value = portal_owner
    >>> browser.getControl(name='__ac_password').value = default_password
    >>> browser.getControl(name='submit').click()

Let's setup pas sqlalchemy plugin:

    >>> from pas.plugins.sqlalchemy import setuphandlers
    >>> setuphandlers.install_pas_plugin(self.portal)

Open @@usergroup-userprefs view to create new users.

    >>> browser.open(portal_url + '/@@usergroup-userprefs')
    >>> browser.getControl('Add New User').click()
    >>> browser.getControl('Full Name').value = 'Test User1'
    >>> browser.getControl('User Name').value = 'test_user1'
    >>> browser.getControl('E-mail').value = 'test1@somedomain.org'
    >>> browser.getControl('Password').value = 'secret'
    >>> browser.getControl('Confirm password').value = 'secret'
    >>> browser.getControl('Administrators').selected = True
    >>> browser.getControl('Reviewers').selected = True
    >>> browser.getControl('Register').click()

    >>> browser.getControl('Add New User').click()
    >>> browser.getControl('Full Name').value = 'Test User2'
    >>> browser.getControl('User Name').value = 'test_user2'
    >>> browser.getControl('E-mail').value = 'test2@somedomain.org'
    >>> browser.getControl('Password').value = 'secret'
    >>> browser.getControl('Confirm password').value = 'secret'
    >>> browser.getControl('Administrators').selected = False
    >>> browser.getControl('Reviewers').selected = False
    >>> browser.getControl('Register').click()

Verify state of all roles from test_user1 and test_user2.
We can verify the first four roles are from test_user1 because 
it inherited 'Manager' and 'Reviewer' role.

    >>> browser.open(portal_url + '/@@usergroup-userprefs')
    >>> roles = browser.getControl(name='users.roles:list:records')
    >>> [(control.optionValue, control.selected) for control in roles.controls]
    [('Contributor', False), ('Editor', False), ('Member', True), ('Reader', False),
     ('Reviewer', False), ('Manager', False), ('Contributor', False), ('Editor', False), 
     ('Member', True), ('Reader', False), ('Contributor', False), ('Editor', False),
     ('Member', True), ('Reader', False), ('Reviewer', False), ('Manager', False)]

Now we can modify user roles and submit form:

    >>> browser.getControl(name='users.roles:list:records').getControl(value='Member', index=1).selected = False
    >>> browser.getControl(name='users.roles:list:records').getControl(value='Contributor', index=1).selected = True
    >>> browser.getControl(name='users.roles:list:records').getControl(value='Editor', index=2).selected = True
    >>> browser.getControl('Apply Changes').click()

And vefiry if the changes was applied:

    >>> browser.open(portal_url + '/@@usergroup-userprefs')
    >>> roles = browser.getControl(name='users.roles:list:records')
    >>> [(control.optionValue, control.selected) for control in roles.controls]
    [('Contributor', False), ('Editor', False), ('Member', True), ('Reader', False),
     ('Reviewer', False), ('Manager', False), ('Contributor', True), ('Editor', False), 
     ('Member', False), ('Reader', False), ('Contributor', False), ('Editor', True),
     ('Member', True), ('Reader', False), ('Reviewer', False), ('Manager', False)]

Finaly we need to be sure pas sqlalchemy plugin direct call, return correct roles
for test_user1 and test_user2:

    >>> sqlplugin = self.portal.acl_users.sql
    >>> sqlplugin.getRolesForPrincipal('test_user1')
    (u'Contributor',)

    >>> sqlplugin.getRolesForPrincipal('test_user2')
    (u'Member', u'Editor')
